package com.sanwenyu.stemplate.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;


import com.sanwenyu.stemplate.beans.Poetry;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "POETRY".
*/
public class PoetryDao extends AbstractDao<Poetry, Long> {

    public static final String TABLENAME = "POETRY";

    /**
     * Properties of entity Poetry.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property PoetryId = new Property(1, long.class, "poetryId", false, "POETRY_ID");
        public final static Property SxId = new Property(2, long.class, "sxId", false, "SX_ID");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Author = new Property(4, String.class, "author", false, "AUTHOR");
        public final static Property Dynasty = new Property(5, String.class, "dynasty", false, "DYNASTY");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
    }


    public PoetryDao(DaoConfig config) {
        super(config);
    }
    
    public PoetryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"POETRY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"POETRY_ID\" INTEGER NOT NULL ," + // 1: poetryId
                "\"SX_ID\" INTEGER NOT NULL ," + // 2: sxId
                "\"TITLE\" TEXT," + // 3: title
                "\"AUTHOR\" TEXT," + // 4: author
                "\"DYNASTY\" TEXT," + // 5: dynasty
                "\"CONTENT\" TEXT);"); // 6: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"POETRY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Poetry entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPoetryId());
        stmt.bindLong(3, entity.getSxId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
 
        String dynasty = entity.getDynasty();
        if (dynasty != null) {
            stmt.bindString(6, dynasty);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Poetry entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getPoetryId());
        stmt.bindLong(3, entity.getSxId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(5, author);
        }
 
        String dynasty = entity.getDynasty();
        if (dynasty != null) {
            stmt.bindString(6, dynasty);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Poetry readEntity(Cursor cursor, int offset) {
        Poetry entity = new Poetry( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // poetryId
            cursor.getLong(offset + 2), // sxId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // author
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dynasty
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Poetry entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPoetryId(cursor.getLong(offset + 1));
        entity.setSxId(cursor.getLong(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAuthor(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDynasty(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Poetry entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Poetry entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Poetry entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
